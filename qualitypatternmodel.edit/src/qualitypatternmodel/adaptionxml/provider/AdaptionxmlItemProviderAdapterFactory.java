/**
 */
package qualitypatternmodel.adaptionxml.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import qualitypatternmodel.adaptionxml.util.AdaptionxmlAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class AdaptionxmlItemProviderAdapterFactory extends AdaptionxmlAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public AdaptionxmlItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link qualitypatternmodel.adaptionxml.XmlElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected XmlElementItemProvider xmlElementItemProvider;

	/**
	 * This creates an adapter for a {@link qualitypatternmodel.adaptionxml.XmlElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createXmlElementAdapter() {
		if (xmlElementItemProvider == null) {
			xmlElementItemProvider = new XmlElementItemProvider(this);
		}

		return xmlElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link qualitypatternmodel.adaptionxml.XmlElementNavigation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected XmlElementNavigationItemProvider xmlElementNavigationItemProvider;

	/**
	 * This creates an adapter for a {@link qualitypatternmodel.adaptionxml.XmlElementNavigation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createXmlElementNavigationAdapter() {
		if (xmlElementNavigationItemProvider == null) {
			xmlElementNavigationItemProvider = new XmlElementNavigationItemProvider(this);
		}

		return xmlElementNavigationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link qualitypatternmodel.adaptionxml.XmlReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected XmlReferenceItemProvider xmlReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link qualitypatternmodel.adaptionxml.XmlReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createXmlReferenceAdapter() {
		if (xmlReferenceItemProvider == null) {
			xmlReferenceItemProvider = new XmlReferenceItemProvider(this);
		}

		return xmlReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link qualitypatternmodel.adaptionxml.XmlProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected XmlPropertyItemProvider xmlPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link qualitypatternmodel.adaptionxml.XmlProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createXmlPropertyAdapter() {
		if (xmlPropertyItemProvider == null) {
			xmlPropertyItemProvider = new XmlPropertyItemProvider(this);
		}

		return xmlPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link qualitypatternmodel.adaptionxml.XmlRoot} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected XmlRootItemProvider xmlRootItemProvider;

	/**
	 * This creates an adapter for a {@link qualitypatternmodel.adaptionxml.XmlRoot}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createXmlRootAdapter() {
		if (xmlRootItemProvider == null) {
			xmlRootItemProvider = new XmlRootItemProvider(this);
		}

		return xmlRootItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link qualitypatternmodel.adaptionxml.XmlPropertyNavigation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected XmlPropertyNavigationItemProvider xmlPropertyNavigationItemProvider;

	/**
	 * This creates an adapter for a {@link qualitypatternmodel.adaptionxml.XmlPropertyNavigation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createXmlPropertyNavigationAdapter() {
		if (xmlPropertyNavigationItemProvider == null) {
			xmlPropertyNavigationItemProvider = new XmlPropertyNavigationItemProvider(this);
		}

		return xmlPropertyNavigationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link qualitypatternmodel.adaptionxml.AxisOptionParam} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AxisOptionParamItemProvider axisOptionParamItemProvider;

	/**
	 * This creates an adapter for a {@link qualitypatternmodel.adaptionxml.AxisOptionParam}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAxisOptionParamAdapter() {
		if (axisOptionParamItemProvider == null) {
			axisOptionParamItemProvider = new AxisOptionParamItemProvider(this);
		}

		return axisOptionParamItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link qualitypatternmodel.adaptionxml.PropertyOptionParam} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropertyOptionParamItemProvider propertyOptionParamItemProvider;

	/**
	 * This creates an adapter for a {@link qualitypatternmodel.adaptionxml.PropertyOptionParam}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropertyOptionParamAdapter() {
		if (propertyOptionParamItemProvider == null) {
			propertyOptionParamItemProvider = new PropertyOptionParamItemProvider(this);
		}

		return propertyOptionParamItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link qualitypatternmodel.adaptionxml.PathParam} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PathParamItemProvider pathParamItemProvider;

	/**
	 * This creates an adapter for a {@link qualitypatternmodel.adaptionxml.PathParam}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPathParamAdapter() {
		if (pathParamItemProvider == null) {
			pathParamItemProvider = new PathParamItemProvider(this);
		}

		return pathParamItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link qualitypatternmodel.adaptionxml.AxisPair} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AxisPairItemProvider axisPairItemProvider;

	/**
	 * This creates an adapter for a {@link qualitypatternmodel.adaptionxml.AxisPair}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAxisPairAdapter() {
		if (axisPairItemProvider == null) {
			axisPairItemProvider = new AxisPairItemProvider(this);
		}

		return axisPairItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (xmlElementItemProvider != null) xmlElementItemProvider.dispose();
		if (xmlElementNavigationItemProvider != null) xmlElementNavigationItemProvider.dispose();
		if (xmlReferenceItemProvider != null) xmlReferenceItemProvider.dispose();
		if (xmlPropertyItemProvider != null) xmlPropertyItemProvider.dispose();
		if (xmlRootItemProvider != null) xmlRootItemProvider.dispose();
		if (xmlPropertyNavigationItemProvider != null) xmlPropertyNavigationItemProvider.dispose();
		if (axisOptionParamItemProvider != null) axisOptionParamItemProvider.dispose();
		if (propertyOptionParamItemProvider != null) propertyOptionParamItemProvider.dispose();
		if (pathParamItemProvider != null) pathParamItemProvider.dispose();
		if (axisPairItemProvider != null) axisPairItemProvider.dispose();
	}

}
