/**
 */
package qualitypatternmodel.adaptionNeo4J.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import qualitypatternmodel.adaptionNeo4J.util.AdaptionNeo4JAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class AdaptionNeo4JItemProviderAdapterFactory extends AdaptionNeo4JAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public AdaptionNeo4JItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link qualitypatternmodel.adaptionNeo4J.NeoNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NeoNodeItemProvider neoNodeItemProvider;

	/**
	 * This creates an adapter for a {@link qualitypatternmodel.adaptionNeo4J.NeoNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNeoNodeAdapter() {
		if (neoNodeItemProvider == null) {
			neoNodeItemProvider = new NeoNodeItemProvider(this);
		}

		return neoNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link qualitypatternmodel.adaptionNeo4J.NeoEdge} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NeoEdgeItemProvider neoEdgeItemProvider;

	/**
	 * This creates an adapter for a {@link qualitypatternmodel.adaptionNeo4J.NeoEdge}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNeoEdgeAdapter() {
		if (neoEdgeItemProvider == null) {
			neoEdgeItemProvider = new NeoEdgeItemProvider(this);
		}

		return neoEdgeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link qualitypatternmodel.adaptionNeo4J.NeoComplexEdge} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NeoComplexEdgeItemProvider neoComplexEdgeItemProvider;

	/**
	 * This creates an adapter for a {@link qualitypatternmodel.adaptionNeo4J.NeoComplexEdge}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNeoComplexEdgeAdapter() {
		if (neoComplexEdgeItemProvider == null) {
			neoComplexEdgeItemProvider = new NeoComplexEdgeItemProvider(this);
		}

		return neoComplexEdgeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link qualitypatternmodel.adaptionNeo4J.NeoSimpleEdge} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NeoSimpleEdgeItemProvider neoSimpleEdgeItemProvider;

	/**
	 * This creates an adapter for a {@link qualitypatternmodel.adaptionNeo4J.NeoSimpleEdge}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNeoSimpleEdgeAdapter() {
		if (neoSimpleEdgeItemProvider == null) {
			neoSimpleEdgeItemProvider = new NeoSimpleEdgeItemProvider(this);
		}

		return neoSimpleEdgeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link qualitypatternmodel.adaptionNeo4J.NeoUnion} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NeoUnionItemProvider neoUnionItemProvider;

	/**
	 * This creates an adapter for a {@link qualitypatternmodel.adaptionNeo4J.NeoUnion}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNeoUnionAdapter() {
		if (neoUnionItemProvider == null) {
			neoUnionItemProvider = new NeoUnionItemProvider(this);
		}

		return neoUnionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link qualitypatternmodel.adaptionNeo4J.NeoAttributeNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NeoAttributeNodeItemProvider neoAttributeNodeItemProvider;

	/**
	 * This creates an adapter for a {@link qualitypatternmodel.adaptionNeo4J.NeoAttributeNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNeoAttributeNodeAdapter() {
		if (neoAttributeNodeItemProvider == null) {
			neoAttributeNodeItemProvider = new NeoAttributeNodeItemProvider(this);
		}

		return neoAttributeNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link qualitypatternmodel.adaptionNeo4J.Neo4JPathParam} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Neo4JPathParamItemProvider neo4JPathParamItemProvider;

	/**
	 * This creates an adapter for a {@link qualitypatternmodel.adaptionNeo4J.Neo4JPathParam}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNeo4JPathParamAdapter() {
		if (neo4JPathParamItemProvider == null) {
			neo4JPathParamItemProvider = new Neo4JPathParamItemProvider(this);
		}

		return neo4JPathParamItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link qualitypatternmodel.adaptionNeo4J.NeoLabel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NeoLabelItemProvider neoLabelItemProvider;

	/**
	 * This creates an adapter for a {@link qualitypatternmodel.adaptionNeo4J.NeoLabel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNeoLabelAdapter() {
		if (neoLabelItemProvider == null) {
			neoLabelItemProvider = new NeoLabelItemProvider(this);
		}

		return neoLabelItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (neoNodeItemProvider != null) neoNodeItemProvider.dispose();
		if (neoEdgeItemProvider != null) neoEdgeItemProvider.dispose();
		if (neoComplexEdgeItemProvider != null) neoComplexEdgeItemProvider.dispose();
		if (neoSimpleEdgeItemProvider != null) neoSimpleEdgeItemProvider.dispose();
		if (neoUnionItemProvider != null) neoUnionItemProvider.dispose();
		if (neoAttributeNodeItemProvider != null) neoAttributeNodeItemProvider.dispose();
		if (neo4JPathParamItemProvider != null) neo4JPathParamItemProvider.dispose();
		if (neoLabelItemProvider != null) neoLabelItemProvider.dispose();
	}

}
