/**
 */
package qualitypatternmodel.adaptionneo4j.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import qualitypatternmodel.adaptionneo4j.util.Adaptionneo4jAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class Adaptionneo4jItemProviderAdapterFactory extends Adaptionneo4jAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adaptionneo4jItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link qualitypatternmodel.adaptionneo4j.NeoElementNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NeoElementNodeItemProvider neoElementNodeItemProvider;

	/**
	 * This creates an adapter for a {@link qualitypatternmodel.adaptionneo4j.NeoElementNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNeoElementNodeAdapter() {
		if (neoElementNodeItemProvider == null) {
			neoElementNodeItemProvider = new NeoElementNodeItemProvider(this);
		}

		return neoElementNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link qualitypatternmodel.adaptionneo4j.NeoElementEdge} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NeoElementEdgeItemProvider neoElementEdgeItemProvider;

	/**
	 * This creates an adapter for a {@link qualitypatternmodel.adaptionneo4j.NeoElementEdge}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNeoElementEdgeAdapter() {
		if (neoElementEdgeItemProvider == null) {
			neoElementEdgeItemProvider = new NeoElementEdgeItemProvider(this);
		}

		return neoElementEdgeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link qualitypatternmodel.adaptionneo4j.NeoComplexEdge} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NeoComplexEdgeItemProvider neoComplexEdgeItemProvider;

	/**
	 * This creates an adapter for a {@link qualitypatternmodel.adaptionneo4j.NeoComplexEdge}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNeoComplexEdgeAdapter() {
		if (neoComplexEdgeItemProvider == null) {
			neoComplexEdgeItemProvider = new NeoComplexEdgeItemProvider(this);
		}

		return neoComplexEdgeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link qualitypatternmodel.adaptionneo4j.NeoSimpleEdge} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NeoSimpleEdgeItemProvider neoSimpleEdgeItemProvider;

	/**
	 * This creates an adapter for a {@link qualitypatternmodel.adaptionneo4j.NeoSimpleEdge}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNeoSimpleEdgeAdapter() {
		if (neoSimpleEdgeItemProvider == null) {
			neoSimpleEdgeItemProvider = new NeoSimpleEdgeItemProvider(this);
		}

		return neoSimpleEdgeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link qualitypatternmodel.adaptionneo4j.NeoPropertyNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NeoPropertyNodeItemProvider neoPropertyNodeItemProvider;

	/**
	 * This creates an adapter for a {@link qualitypatternmodel.adaptionneo4j.NeoPropertyNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNeoPropertyNodeAdapter() {
		if (neoPropertyNodeItemProvider == null) {
			neoPropertyNodeItemProvider = new NeoPropertyNodeItemProvider(this);
		}

		return neoPropertyNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link qualitypatternmodel.adaptionneo4j.NeoElementPathParam} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NeoElementPathParamItemProvider neoElementPathParamItemProvider;

	/**
	 * This creates an adapter for a {@link qualitypatternmodel.adaptionneo4j.NeoElementPathParam}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNeoElementPathParamAdapter() {
		if (neoElementPathParamItemProvider == null) {
			neoElementPathParamItemProvider = new NeoElementPathParamItemProvider(this);
		}

		return neoElementPathParamItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link qualitypatternmodel.adaptionneo4j.NeoPropertyPathParam} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NeoPropertyPathParamItemProvider neoPropertyPathParamItemProvider;

	/**
	 * This creates an adapter for a {@link qualitypatternmodel.adaptionneo4j.NeoPropertyPathParam}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNeoPropertyPathParamAdapter() {
		if (neoPropertyPathParamItemProvider == null) {
			neoPropertyPathParamItemProvider = new NeoPropertyPathParamItemProvider(this);
		}

		return neoPropertyPathParamItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link qualitypatternmodel.adaptionneo4j.NeoPropertyEdge} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NeoPropertyEdgeItemProvider neoPropertyEdgeItemProvider;

	/**
	 * This creates an adapter for a {@link qualitypatternmodel.adaptionneo4j.NeoPropertyEdge}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNeoPropertyEdgeAdapter() {
		if (neoPropertyEdgeItemProvider == null) {
			neoPropertyEdgeItemProvider = new NeoPropertyEdgeItemProvider(this);
		}

		return neoPropertyEdgeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link qualitypatternmodel.adaptionneo4j.NeoNodeLabelsParam} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NeoNodeLabelsParamItemProvider neoNodeLabelsParamItemProvider;

	/**
	 * This creates an adapter for a {@link qualitypatternmodel.adaptionneo4j.NeoNodeLabelsParam}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNeoNodeLabelsParamAdapter() {
		if (neoNodeLabelsParamItemProvider == null) {
			neoNodeLabelsParamItemProvider = new NeoNodeLabelsParamItemProvider(this);
		}

		return neoNodeLabelsParamItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link qualitypatternmodel.adaptionneo4j.NeoEdgeLabelParam} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NeoEdgeLabelParamItemProvider neoEdgeLabelParamItemProvider;

	/**
	 * This creates an adapter for a {@link qualitypatternmodel.adaptionneo4j.NeoEdgeLabelParam}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNeoEdgeLabelParamAdapter() {
		if (neoEdgeLabelParamItemProvider == null) {
			neoEdgeLabelParamItemProvider = new NeoEdgeLabelParamItemProvider(this);
		}

		return neoEdgeLabelParamItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link qualitypatternmodel.adaptionneo4j.NeoPropertyNameParam} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NeoPropertyNameParamItemProvider neoPropertyNameParamItemProvider;

	/**
	 * This creates an adapter for a {@link qualitypatternmodel.adaptionneo4j.NeoPropertyNameParam}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNeoPropertyNameParamAdapter() {
		if (neoPropertyNameParamItemProvider == null) {
			neoPropertyNameParamItemProvider = new NeoPropertyNameParamItemProvider(this);
		}

		return neoPropertyNameParamItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (neoElementNodeItemProvider != null) neoElementNodeItemProvider.dispose();
		if (neoElementEdgeItemProvider != null) neoElementEdgeItemProvider.dispose();
		if (neoComplexEdgeItemProvider != null) neoComplexEdgeItemProvider.dispose();
		if (neoSimpleEdgeItemProvider != null) neoSimpleEdgeItemProvider.dispose();
		if (neoPropertyNodeItemProvider != null) neoPropertyNodeItemProvider.dispose();
		if (neoElementPathParamItemProvider != null) neoElementPathParamItemProvider.dispose();
		if (neoPropertyPathParamItemProvider != null) neoPropertyPathParamItemProvider.dispose();
		if (neoPropertyEdgeItemProvider != null) neoPropertyEdgeItemProvider.dispose();
		if (neoNodeLabelsParamItemProvider != null) neoNodeLabelsParamItemProvider.dispose();
		if (neoEdgeLabelParamItemProvider != null) neoEdgeLabelParamItemProvider.dispose();
		if (neoPropertyNameParamItemProvider != null) neoPropertyNameParamItemProvider.dispose();
	}

}
